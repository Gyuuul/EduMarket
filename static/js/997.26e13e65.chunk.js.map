{"version":3,"file":"static/js/997.26e13e65.chunk.js","mappings":"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","sources":["components/follow/FollowButton.js","components/follow/FollowList.jsx","pages/profile/getUserProfile.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../node_modules/src/observe.ts","../node_modules/src/InView.tsx","../node_modules/src/useInView.tsx"],"sourcesContent":["import axios from 'axios'\r\nimport React from 'react'\r\nimport styled from 'styled-components';\r\n\r\nimport { URL } from '../../lib/apis/constant/path'\r\n\r\nexport default function FollowButton({accountname, isfollow}) {\r\n    const userToken= localStorage.getItem('Access Token');\r\n\r\n    const handle= async ()=> {\r\n        if(isfollow){\r\n            /** 언팔로우 */\r\n            const res= await axios.delete(`${URL}/profile/${accountname}/unfollow`, {\r\n                headers: {\r\n                    \"Authorization\" : `Bearer ${userToken}`,\r\n                    \"Content-type\" : \"application/json\"\r\n                }\r\n            })\r\n            console.log(res);\r\n        }\r\n        else{\r\n            /** 팔로우 */\r\n            const res= await axios.post(`${URL}/profile/${accountname}/follow`,[],{\r\n                headers: {\r\n                    \"Authorization\" : `Bearer ${userToken}`,\r\n                    \"Content-type\" : \"application/json\"\r\n                }\r\n            })\r\n            console.log(res);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Button onClick={handle} aria-label=\"{isfollow ? ' 팔로우' : '팔로잉'}\" >\r\n                {isfollow ? ' 팔로우' : '팔로잉'}\r\n            </Button>\r\n        </>\r\n    );\r\n}\r\nconst Button = styled.button`\r\n    width: 170px;\r\n    padding: 12px 16px;\r\n    border-radius: 0.25rem;\r\n    border: 1px solid rgba(0,0,0,0.09);\r\n    border-radius: 10px;\r\n    background-color: #ffff;\r\n    font-family: \"Noto_Sans_KR-400\";\r\n    box-shadow: 0 1px 4px rgba(0,0,0,0.04);\r\n`;\r\n","import React, { useState } from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport styled from 'styled-components';\r\n\r\nimport FollowButton from './FollowButton';\r\nimport getUserProfile from '../../pages/profile/getUserProfile';\r\nimport { setUserInfo } from '../../store/slice/userSlice';\r\n\r\nexport default function FollowList({ accountname, isfollow, image }) {\r\n    const navigate= useNavigate();\r\n    const dispatch= useDispatch();\r\n    const myAccountname = useSelector((state) => { return state.user.myInfo.accountname; });\r\n    const [isFollow, setIsFollow]= useState(isfollow);\r\n\r\n    async function setUser() {\r\n        const user = await getUserProfile(accountname);\r\n        dispatch(setUserInfo(user));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <FollowSection>\r\n                    <Wrap>\r\n                        <div onClick={async(e)=> {\r\n                            await setUser();\r\n                            navigate(`../profile/${accountname}`);\r\n                        }}>\r\n                            <ProfileImage src={image} alt=\"유저 프로필 이미지\" />\r\n                        </div>\r\n                        <ProfileId>@{accountname}</ProfileId>\r\n                    </Wrap>\r\n\r\n                    {myAccountname === accountname ? null : (\r\n                        <FollowButtonDiv onClick={async()=> {\r\n                            setIsFollow(!isFollow);\r\n                        }}>\r\n                            <FollowButton\r\n                                accountname={accountname}\r\n                                isfollow={isFollow}\r\n                            />\r\n                        </FollowButtonDiv>\r\n                    )}\r\n            </FollowSection>\r\n        </>\r\n    );\r\n}\r\n\r\nconst FollowSection = styled.section`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    max-width: 1400px;\r\n    margin: 0 auto;\r\n    padding: 30px 220px;\r\n    border: 1px solid rgba(0,0,0,0.09);\r\n    border-radius: 15px;\r\n    box-shadow: 0 1px 4px rgba(0,0,0,0.04);\r\n`\r\nconst Wrap= styled.div`\r\n    display: flex;\r\n    gap: 35px;\r\n    align-items: center;\r\n    justify-content: center;\r\n`\r\nconst FollowButtonDiv = styled.div`\r\n    margin-top: 55px;\r\n`\r\nconst ProfileImage = styled.img`\r\n    width: 150px;\r\n    height: 150px;\r\n    border-radius: 50%;\r\n`\r\nconst ProfileId = styled.p`\r\n    font-size: 17px;\r\n    font-weight: 600;\r\n    text-align: center;\r\n`","import instance from \"../../lib/apis/interceptor\";\r\n\r\nexport default async function getUserProfile(accountname) {\r\n    try {\r\n        const response = await instance.get(`/profile/${accountname}`);\r\n        console.log(response);\r\n        return response.data.profile;\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}","import type { ObserverInstanceCallback } from './index';\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit['root']) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === 'root'\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === 'undefined' &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport type { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.unobserve();\n    this.observeNode();\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === 'function') {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from 'react';\nimport type { InViewHookResponse, IntersectionOptions } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions['onChange']>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["FollowButton","_ref","accountname","isfollow","userToken","localStorage","getItem","handle","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","res","_res","wrap","_context","prev","next","axios","delete","concat","URL","headers","sent","console","log","post","stop","apply","arguments","_jsx","_Fragment","children","Button","onClick","styled","button","_templateObject","_taggedTemplateLiteral","FollowList","image","navigate","useNavigate","dispatch","useDispatch","myAccountname","useSelector","state","user","myInfo","_useState","useState","_useState2","_slicedToArray","isFollow","setIsFollow","setUser","_setUser","_callee3","_context3","getUserProfile","setUserInfo","_jsxs","FollowSection","Wrap","e","_x","ProfileImage","src","alt","ProfileId","FollowButtonDiv","_callee2","_context2","section","div","_templateObject2","_templateObject3","img","_templateObject4","p","_templateObject5","_getUserProfile","response","instance","get","abrupt","data","profile","t0","_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","sort","filter","map","root","has","set","toString","observe","element","callback","undefined","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","intersectionRatio","threshold","time","boundingClientRect","intersectionRect","rootBounds","_createObserver","id","thresholds","elements","observer","entries","forEach","entry","_a","inView","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","unobserve","size","disconnect","React","useInView","delay","rootMargin","triggerOnce","skip","initialInView","onChange","_React2$useState","React2","_React2$useState2","ref","setRef","_React2$useState3","_React2$useState4","setState","current","entryTarget","previousEntryTarget","result"],"sourceRoot":""}